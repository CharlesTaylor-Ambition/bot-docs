<Type Name="IMemory" FullName="AdaptiveExpressions.Memory.IMemory">
  <TypeSignature Language="C#" Value="public interface IMemory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemory" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Memory.IMemory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemory" />
  <TypeSignature Language="F#" Value="type IMemory = interface" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Memory interface.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string path, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(string path, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Memory.IMemory.SetValue(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (path As String, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetValue : string * obj -&gt; unit" Usage="iMemory.SetValue (path, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">memory path.</param>
        <param name="value">Value to set.</param>
        <summary>
            Set value to a given path.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (string path, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(string path, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Memory.IMemory.TryGetValue(System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (path As String, ByRef value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : string * obj -&gt; bool" Usage="iMemory.TryGetValue (path, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="value" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">memory path.</param>
        <param name="value">resolved value.</param>
        <summary>
            Try get value from a given path, it can be a simple identifier like "a", or
            a combined path like "a.b", "a.b[2]", "a.b[2].c", inside [] is guaranteed to be a int number or a string.
            </summary>
        <returns> true if the memory contains an element with the specified key; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public string Version ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Version() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Memory.IMemory.Version" />
      <MemberSignature Language="VB.NET" Value="Public Function Version () As String" />
      <MemberSignature Language="F#" Value="abstract member Version : unit -&gt; string" Usage="iMemory.Version " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Version is used to identify whether the a particular memory instance has been updated or not.
            If version is not changed, the caller may choose to use the cached result instead of recomputing everything.
            </summary>
        <returns>A string indicates the version.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
