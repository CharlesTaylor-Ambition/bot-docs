<Type Name="EvaluatorLookup" FullName="AdaptiveExpressions.EvaluatorLookup">
  <TypeSignature Language="C#" Value="public delegate AdaptiveExpressions.ExpressionEvaluator EvaluatorLookup(string type);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EvaluatorLookup extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.EvaluatorLookup" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function EvaluatorLookup(type As String) As ExpressionEvaluator " />
  <TypeSignature Language="F#" Value="type EvaluatorLookup = delegate of string -&gt; ExpressionEvaluator" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="type" Type="System.String" />
  </Parameters>
  <ReturnValue>
    <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="type">Name to lookup, usually from <see cref="T:AdaptiveExpressions.ExpressionType" />.</param>
    <summary>
            Delegate to lookup function information from the type.
            </summary>
    <returns>Expression evaluation information.</returns>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
