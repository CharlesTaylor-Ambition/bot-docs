<Type Name="ExpressionFunctions" FullName="AdaptiveExpressions.ExpressionFunctions">
  <TypeSignature Language="C#" Value="public static class ExpressionFunctions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionFunctions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.ExpressionFunctions" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionFunctions" />
  <TypeSignature Language="F#" Value="type ExpressionFunctions = class" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
    <AssemblyVersion>4.11.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Definition of default built-in functions for expressions.
             </summary>
    <remarks>
             These functions are largely from WDL https://docs.microsoft.com/en-us/azure/logic-apps/workflow-definition-language-functions-reference
             with a few extensions like infix operators for math, logic and comparisons.
            
             This class also has some methods that are useful to use when defining custom functions.
             You can always construct a <see cref="T:AdaptiveExpressions.ExpressionEvaluator" /> directly which gives the maximum amount of control over validation and evaluation.
             Validators are static checkers that should throw an exception if something is not valid statically.
             Evaluators are called to evaluate an expression and should try not to throw.
             There are some evaluators in this file that take in a verifier that is called at runtime to verify arguments are proper.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName="StandardFunctions">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Generic.IDictionary&lt;string,AdaptiveExpressions.ExpressionEvaluator&gt; StandardFunctions;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Generic.IDictionary`2&lt;string, class AdaptiveExpressions.ExpressionEvaluator&gt; StandardFunctions" />
      <MemberSignature Language="DocId" Value="F:AdaptiveExpressions.ExpressionFunctions.StandardFunctions" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StandardFunctions As IDictionary(Of String, ExpressionEvaluator) " />
      <MemberSignature Language="F#" Value=" staticval mutable StandardFunctions : System.Collections.Generic.IDictionary&lt;string, AdaptiveExpressions.ExpressionEvaluator&gt;" Usage="AdaptiveExpressions.ExpressionFunctions.StandardFunctions" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,AdaptiveExpressions.ExpressionEvaluator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Read only Dictionary of built in functions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
