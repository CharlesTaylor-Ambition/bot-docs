<Type Name="StringExpression" FullName="AdaptiveExpressions.Properties.StringExpression">
  <TypeSignature Language="C#" Value="public class StringExpression : AdaptiveExpressions.Properties.ExpressionProperty&lt;string&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StringExpression extends AdaptiveExpressions.Properties.ExpressionProperty`1&lt;string&gt;" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Properties.StringExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class StringExpression&#xA;Inherits ExpressionProperty(Of String)" />
  <TypeSignature Language="F#" Value="type StringExpression = class&#xA;    inherit ExpressionProperty&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>AdaptiveExpressions.Properties.ExpressionProperty&lt;System.String&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">System.String</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Newtonsoft.Json.JsonConverter(typeof(AdaptiveExpressions.Converters.StringExpressionConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonConverter(typeof(AdaptiveExpressions.Converters.StringExpressionConverter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            StringExpression - represents a property which is either a string value or a string expression.
            </summary>
    <remarks>
            If the value is 
            * a string with '=' prefix then the string is treated as an expression to resolve to a string. 
            * a string without '=' then value is treated as string with string interpolation.
            * You can escape the '=' prefix by putting a backslash.  
            Examples: 
                prop = "Hello ${user.name}" =&gt; "Hello Joe"
                prop = "=length(user.name)" =&gt; "3"
                prop = "=user.name" =&gt; "Joe"
                prop = "\=user" =&gt; "=user".
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringExpression (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.#ctor(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As Expression)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.StringExpression : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="new AdaptiveExpressions.Properties.StringExpression expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">expression to a string.</param>
        <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringExpression (Newtonsoft.Json.Linq.JToken expressionOrValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Newtonsoft.Json.Linq.JToken expressionOrValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.#ctor(Newtonsoft.Json.Linq.JToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expressionOrValue As JToken)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.StringExpression : Newtonsoft.Json.Linq.JToken -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="new AdaptiveExpressions.Properties.StringExpression expressionOrValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expressionOrValue" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="expressionOrValue">value to interpret as a string or expression to a string.</param>
        <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringExpression (Func&lt;object,object&gt; lambda);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;object, object&gt; lambda) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.#ctor(System.Func{System.Object,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (lambda As Func(Of Object, Object))" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.StringExpression : Func&lt;obj, obj&gt; -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="new AdaptiveExpressions.Properties.StringExpression lambda" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;System.Object,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="lambda">function (data) which evaluates to string.</param>
        <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringExpression (string expressionOrValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string expressionOrValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expressionOrValue As String)" />
      <MemberSignature Language="F#" Value="new AdaptiveExpressions.Properties.StringExpression : string -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="new AdaptiveExpressions.Properties.StringExpression expressionOrValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expressionOrValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expressionOrValue">string to interpret as string or expression to a string.</param>
        <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.StringExpression (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.StringExpression op_Implicit(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.op_Implicit(AdaptiveExpressions.Expression)~AdaptiveExpressions.Properties.StringExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As Expression) As StringExpression" />
      <MemberSignature Language="F#" Value="static member op_Implicit : AdaptiveExpressions.Expression -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="AdaptiveExpressions.Properties.StringExpression.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.StringExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">The Expression instance to convert.</param>
        <summary>
            Converts an Expression instance to a StringExpression instance.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.StringExpression (Newtonsoft.Json.Linq.JToken valueOrExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.StringExpression op_Implicit(class Newtonsoft.Json.Linq.JToken valueOrExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.op_Implicit(Newtonsoft.Json.Linq.JToken)~AdaptiveExpressions.Properties.StringExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (valueOrExpression As JToken) As StringExpression" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Newtonsoft.Json.Linq.JToken -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="AdaptiveExpressions.Properties.StringExpression.op_Implicit valueOrExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.StringExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueOrExpression" Type="Newtonsoft.Json.Linq.JToken" />
      </Parameters>
      <Docs>
        <param name="valueOrExpression">The JSON Token to convert.</param>
        <summary>
            Converts a JSON Token to a StringExpression instance.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator AdaptiveExpressions.Properties.StringExpression (string valueOrExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class AdaptiveExpressions.Properties.StringExpression op_Implicit(string valueOrExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.op_Implicit(System.String)~AdaptiveExpressions.Properties.StringExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (valueOrExpression As String) As StringExpression" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="AdaptiveExpressions.Properties.StringExpression.op_Implicit valueOrExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.StringExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueOrExpression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="valueOrExpression">The string value to convert.</param>
        <summary>
            Converts a string value to a StringExpression instance.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public override void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Properties.StringExpression.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetValue (value As Object)" />
      <MemberSignature Language="F#" Value="override this.SetValue : obj -&gt; unit" Usage="stringExpression.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Value to set.</param>
        <summary>
            Sets the value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
