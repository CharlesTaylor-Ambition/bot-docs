<Type Name="StringExpressionConverter" FullName="AdaptiveExpressions.Converters.StringExpressionConverter">
  <TypeSignature Language="C#" Value="public class StringExpressionConverter : Newtonsoft.Json.JsonConverter&lt;AdaptiveExpressions.Properties.StringExpression&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StringExpressionConverter extends Newtonsoft.Json.JsonConverter`1&lt;class AdaptiveExpressions.Properties.StringExpression&gt;" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.Converters.StringExpressionConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class StringExpressionConverter&#xA;Inherits JsonConverter(Of StringExpression)" />
  <TypeSignature Language="F#" Value="type StringExpressionConverter = class&#xA;    inherit JsonConverter&lt;StringExpression&gt;" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Newtonsoft.Json.JsonConverter&lt;AdaptiveExpressions.Properties.StringExpression&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">AdaptiveExpressions.Properties.StringExpression</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringExpressionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Converters.StringExpressionConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Converters.StringExpressionConverter" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadJson">
      <MemberSignature Language="C#" Value="public override AdaptiveExpressions.Properties.StringExpression ReadJson (Newtonsoft.Json.JsonReader reader, Type objectType, AdaptiveExpressions.Properties.StringExpression existingValue, bool hasExistingValue, Newtonsoft.Json.JsonSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class AdaptiveExpressions.Properties.StringExpression ReadJson(class Newtonsoft.Json.JsonReader reader, class System.Type objectType, class AdaptiveExpressions.Properties.StringExpression existingValue, bool hasExistingValue, class Newtonsoft.Json.JsonSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Converters.StringExpressionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,AdaptiveExpressions.Properties.StringExpression,System.Boolean,Newtonsoft.Json.JsonSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadJson (reader As JsonReader, objectType As Type, existingValue As StringExpression, hasExistingValue As Boolean, serializer As JsonSerializer) As StringExpression" />
      <MemberSignature Language="F#" Value="override this.ReadJson : Newtonsoft.Json.JsonReader * Type * AdaptiveExpressions.Properties.StringExpression * bool * Newtonsoft.Json.JsonSerializer -&gt; AdaptiveExpressions.Properties.StringExpression" Usage="stringExpressionConverter.ReadJson (reader, objectType, existingValue, hasExistingValue, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.Properties.StringExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="existingValue" Type="AdaptiveExpressions.Properties.StringExpression" />
        <Parameter Name="hasExistingValue" Type="System.Boolean" />
        <Parameter Name="serializer" Type="Newtonsoft.Json.JsonSerializer" />
      </Parameters>
      <Docs>
        <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
        <param name="objectType">Type of the object.</param>
        <param name="existingValue">The existing value of object being read.</param>
        <param name="hasExistingValue">A boolean value indicating whether there is an existing value of object to be read.</param>
        <param name="serializer">The calling serializer.</param>
        <summary>
            Reads the JSON representation of the object.
            </summary>
        <returns>A StringExpression instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteJson">
      <MemberSignature Language="C#" Value="public override void WriteJson (Newtonsoft.Json.JsonWriter writer, AdaptiveExpressions.Properties.StringExpression value, Newtonsoft.Json.JsonSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteJson(class Newtonsoft.Json.JsonWriter writer, class AdaptiveExpressions.Properties.StringExpression value, class Newtonsoft.Json.JsonSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.Converters.StringExpressionConverter.WriteJson(Newtonsoft.Json.JsonWriter,AdaptiveExpressions.Properties.StringExpression,Newtonsoft.Json.JsonSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteJson (writer As JsonWriter, value As StringExpression, serializer As JsonSerializer)" />
      <MemberSignature Language="F#" Value="override this.WriteJson : Newtonsoft.Json.JsonWriter * AdaptiveExpressions.Properties.StringExpression * Newtonsoft.Json.JsonSerializer -&gt; unit" Usage="stringExpressionConverter.WriteJson (writer, value, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="Newtonsoft.Json.JsonWriter" />
        <Parameter Name="value" Type="AdaptiveExpressions.Properties.StringExpression" />
        <Parameter Name="serializer" Type="Newtonsoft.Json.JsonSerializer" />
      </Parameters>
      <Docs>
        <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
        <param name="value">The value.</param>
        <param name="serializer">The calling serializer.</param>
        <summary>
            Writes the JSON representation of the object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
